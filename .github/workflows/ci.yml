name: Continuous Integration

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: cd frontend && npm ci
    
    - name: Run linting
      run: cd frontend && npm run lint
    
    - name: Run type checking
      run: cd frontend && npm run type-check
    
    - name: Run tests
      run: cd frontend && npm run test:ci
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        flags: frontend
        directory: frontend/coverage

  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: cd backend && npm ci
    
    - name: Run linting
      run: cd backend && npm run lint
    
    - name: Run type checking
      run: cd backend && npm run type-check
    
    - name: Run unit tests
      run: cd backend && npm run test:unit
      env:
        MONGODB_URI: mongodb://localhost:27017/satyashield_test
        REDIS_URI: redis://localhost:6379
        JWT_SECRET: test-secret
        NODE_ENV: test
    
    - name: Run integration tests
      run: cd backend && npm run test:integration
      env:
        MONGODB_URI: mongodb://localhost:27017/satyashield_test
        REDIS_URI: redis://localhost:6379
        JWT_SECRET: test-secret
        NODE_ENV: test

  test-ai-engine:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: ai-engine/requirements.txt
    
    - name: Install dependencies
      run: |
        cd ai-engine
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: cd ai-engine && flake8 .
    
    - name: Run type checking
      run: cd ai-engine && mypy .
    
    - name: Run tests
      run: cd ai-engine && pytest --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        flags: ai-engine
        directory: ai-engine

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ai-engine, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./deployment/docker/frontend.Dockerfile
        push: true
        tags: satyashield/frontend:latest,satyashield/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./deployment/docker/backend.Dockerfile
        push: true
        tags: satyashield/backend:latest,satyashield/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push AI Engine
      uses: docker/build-push-action@v5
      with:
        context: ./ai-engine
        file: ./deployment/docker/ai-engine.Dockerfile
        push: true
        tags: satyashield/ai-engine:latest,satyashield/ai-engine:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
